{"version":3,"sources":["assignments/TaskForm.js","assignments/TaskCounter.js","assignments/Task.js","assignments/TaskApp.js","App.js","reportWebVitals.js","index.js"],"names":["TaskForm","onAdd","useState","taskName","setTaskName","type","onChange","event","target","value","onClick","console","log","TaskCounter","tasks","remainingTaskMessage","filter","task","isDone","length","Task","onClickTask","className","name","taskId","TaskApp","setTasks","taskList","map","id","newTask","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAwBeA,MAtBf,YAA8B,IAAVC,EAAS,EAATA,MAEhB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAYA,OACI,gCACI,uBAAOC,KAAK,OAAOC,SAZ3B,SAAkBC,GACdH,EAAYG,EAAMC,OAAOC,QAWkBA,MAAON,IAC9C,wBAAQO,QAThB,WACIC,QAAQC,IAAI,aACZX,EAAME,GACNC,EAAY,KAMR,qB,MCLGS,MAdf,YAAiC,IAAVC,EAAS,EAATA,MAIbC,EAFcD,EAAME,QAAQ,SAACC,GAAD,OAAYA,EAAKC,UAEVC,OAAS,qBAAuBL,EAAMK,OAAS,SAExF,OACI,8BACI,4BAAIJ,OCMDK,MAdf,YAAsC,IAAtBH,EAAqB,EAArBA,KAAMI,EAAe,EAAfA,YAMlB,OACI,qBAAKC,UAAWL,EAAKC,OAAS,UAAY,GAAIR,QALlD,WACIW,EAAYJ,IAIZ,SACKA,EAAKM,QCHdC,EAAS,EAmCEC,MAjCf,WACI,MAA0BvB,mBAAS,IAAnC,mBAAOY,EAAP,KAAcY,EAAd,KAUA,SAASL,EAAYJ,GACjBA,EAAKC,QAAUD,EAAKC,OACpBQ,EAAS,YAAIZ,IAGjB,IAAMa,EAAWb,EAAMc,KAAI,SAACX,GAAD,OACvB,6BACI,cAAC,EAAD,CAAMA,KAAMA,EAAMI,YAAaA,KAD1BJ,EAAKY,OAKlB,OACI,gCACI,cAAC,EAAD,CAAU5B,MArBlB,SAAiBE,GACb,GAAIA,EAAU,CACV,IAAM2B,EAAU,CAACD,GAAIL,EAAQD,KAAMpB,EAAUe,QAAQ,GACrDQ,EAAS,GAAD,mBAAKZ,GAAL,CAAYgB,KACpBN,QAkBA,cAAC,EAAD,CAAaV,MAAOA,IACpB,6BACKa,QCrBFI,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f046a73e.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction TaskForm( {onAdd} ) {\r\n\r\n    const [taskName, setTaskName] = useState(\"\");\r\n\r\n    function onChange(event) {\r\n        setTaskName(event.target.value);\r\n    }\r\n\r\n    function addTask() {\r\n        console.log(\"Add tasks\");\r\n        onAdd(taskName);\r\n        setTaskName(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" onChange={onChange} value={taskName}/>\r\n            <button onClick={addTask}>Add</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","function TaskCounter( {tasks} ) {\r\n\r\n    const activeTasks = tasks.filter( (task) => (!task.isDone));\r\n\r\n    const remainingTaskMessage = activeTasks.length + \" remaining out of \" + tasks.length + \" tasks\";\r\n\r\n    return (\r\n        <div>\r\n            <p>{remainingTaskMessage}</p>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskCounter;\r\n","function Task( {task, onClickTask} ) {\r\n\r\n    function clickTask() {\r\n        onClickTask(task);\r\n    }\r\n\r\n    return (\r\n        <div className={task.isDone ? 'is-done' : ''} onClick={clickTask}>\r\n            {task.name}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Task;\r\n","import { useState } from 'react';\r\nimport TaskForm from './TaskForm';\r\nimport './TaskApp.css';\r\nimport TaskCounter from './TaskCounter';\r\nimport Task from './Task';\r\nlet taskId = 1; \r\n\r\nfunction TaskApp() {\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    function addTask(taskName) {\r\n        if (taskName) {\r\n            const newTask = {id: taskId, name: taskName, isDone: false};\r\n            setTasks([...tasks, newTask]);\r\n            taskId++;\r\n        }\r\n    }\r\n\r\n    function onClickTask(task) {\r\n        task.isDone = !task.isDone;\r\n        setTasks([...tasks]);\r\n    }\r\n\r\n    const taskList = tasks.map((task) => (\r\n        <li key={task.id}>\r\n            <Task task={task} onClickTask={onClickTask}/>\r\n        </li>\r\n    ));\r\n\r\n    return (\r\n        <div>\r\n            <TaskForm onAdd={addTask} />\r\n            <TaskCounter tasks={tasks} />\r\n            <ul>\r\n                {taskList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskApp;\r\n","import './App.css';\r\n\r\n//import TrainingApp from './components/TrainingApp';\r\nimport TaskApp from './assignments/TaskApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TaskApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}