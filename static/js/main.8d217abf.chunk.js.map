{"version":3,"sources":["assignments/TaskForm.js","assignments/TaskApp.js","App.js","reportWebVitals.js","index.js"],"names":["TaskForm","onAdd","useState","taskName","setTaskName","type","onKeyUp","event","target","value","onClick","console","log","TaskApp","taskId","tasks","setTasks","remainingTaskMessage","filter","task","active","length","taskList","map","className","name","id","newTask","forEach","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAuBeA,MArBf,YAA8B,IAAVC,EAAS,EAATA,MAEhB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,OACI,gCACI,uBAAOC,KAAK,OAAOC,QAX3B,SAAeC,GACXH,EAAYG,EAAMC,OAAOC,UAWrB,wBAAQC,QARhB,WACIC,QAAQC,IAAI,aACZX,EAAME,IAMF,qB,MCyBGU,MAvCf,WACI,IAAIC,EAAS,EAEb,EAA0BZ,mBAAS,IAAnC,mBAAOa,EAAP,KAAcC,EAAd,KAiBMC,EAFcF,EAAMG,QAAQ,SAACC,GAAD,OAAWA,EAAKC,UAETC,OAAS,qBAAuBN,EAAMM,OAAS,SAElFC,EAAWP,EAAMQ,KAAI,SAACJ,GAAD,OACvB,oBAAkBK,UAAWL,EAAKC,OAAS,GAAK,UAAhD,SACKD,EAAKM,MADDN,EAAKO,OAKlB,OACI,gCACI,cAAC,EAAD,CAAUzB,MAzBlB,SAAiBE,GACb,GAAKA,EAKE,CACH,IAAMwB,EAAU,CAACD,GAAIZ,EAAQW,KAAMtB,EAAUiB,QAAQ,GACrDJ,EAAS,GAAD,mBAAKD,GAAL,CAAYY,KACpBb,SAPAC,EAAMa,SAAS,SAACT,GACZA,EAAKC,QAAS,KAElBJ,EAAS,YAAID,OAqBb,4BAAIE,IACJ,6BACKK,QCxBFO,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8d217abf.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction TaskForm( {onAdd} ) {\r\n\r\n    const [taskName, setTaskName] = useState(\"\");\r\n\r\n    function doKey(event) {\r\n        setTaskName(event.target.value);\r\n    }\r\n\r\n    function addTask() {\r\n        console.log(\"Add tasks\");\r\n        onAdd(taskName);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" onKeyUp={doKey}/>\r\n            <button onClick={addTask}>Add</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","import { useState } from 'react';\r\nimport TaskForm from './TaskForm';\r\nimport './TaskApp.css';\r\n\r\nfunction TaskApp() {\r\n    let taskId = 1; \r\n\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    function addTask(taskName) {\r\n        if (!taskName) {\r\n            tasks.forEach( (task) => {\r\n                task.active = false;\r\n            })\r\n            setTasks([...tasks]);\r\n        } else {\r\n            const newTask = {id: taskId, name: taskName, active: true};\r\n            setTasks([...tasks, newTask]);\r\n            taskId++;\r\n        }\r\n    }\r\n\r\n    const activeTasks = tasks.filter( (task) => (task.active));\r\n\r\n    const remainingTaskMessage = activeTasks.length + \" remaining out of \" + tasks.length + \" tasks\";\r\n\r\n    const taskList = tasks.map((task) => (\r\n        <li key={task.id} className={task.active ? '' : 'is-done'}>\r\n            {task.name}\r\n        </li>\r\n    ));\r\n\r\n    return (\r\n        <div>\r\n            <TaskForm onAdd={addTask}/>\r\n            <p>{remainingTaskMessage}</p>\r\n            <ul>\r\n                {taskList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskApp;\r\n","import './App.css';\r\n\r\n//import TrainingApp from './components/TrainingApp';\r\nimport TaskApp from './assignments/TaskApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TaskApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}